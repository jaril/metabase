name: E2E Tests (aggregate)

on:
  # We'll record runs using Replay.io and their browser on a schedule as an experiment
  schedule:
    - cron: "0 */8 * * *"
  push:
    branches:
      - "master"
      - "release-**"
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

concurrency:
  group: ${{ github.workflow }}-${{ github.run_id }}

jobs:
  test-run-id:
    runs-on: ubuntu-22.04
    outputs:
      testRunId: ${{ steps.testRunId.outputs.testRunId }}
    steps:
      - id: testRunId
        run: echo testRunId=$(npx uuid) >> "$GITHUB_OUTPUT"

  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 25
    strategy:
      matrix:
        edition: [ee]
    env:
      MB_EDITION: ${{ matrix.edition }}
      INTERACTIVE: false
    steps:
      - uses: actions/checkout@v3
      - name: Prepare front-end environment
        uses: ./.github/actions/prepare-frontend
      - name: Prepare back-end environment
        uses: ./.github/actions/prepare-backend
        with:
          m2-cache-key: e2e-tests

      - name: Cache uberjar
        id: cache-uberjar
        uses: actions/cache@v3
        with:
          path: ./target/uberjar/metabase.jar
          key: ${{ github.workflow }}-uberjar

      - name: Build uberjar with ./bin/build.sh
        if: steps.cache-uberjar.outputs.cache-hit != 'true'
        run: ./bin/build.sh

      - name: Prepare uberjar artifact
        uses: ./.github/actions/prepare-uberjar-artifact

  e2e-tests:
    needs: [build, test-run-id]
    if: |
      always() &&
      needs.build.result == 'success'
    runs-on: ubuntu-22.04
    outputs:
      baselineDuration: ${{steps.end.outputs.baselineDuration}}
      videoDuration: ${{steps.end.outputs.videoDuration}}
      replayV1Duration: ${{steps.end.outputs.replayV1Duration}}
      replayV2Duration: ${{steps.end.outputs.replayV2Duration}}
      deploySentinelDuration: ${{steps.end.outputs.deploySentinelDuration}}
    timeout-minutes: 120
    name: e2e-tests-${{ matrix.folder }}${{ matrix.context }}-${{ matrix.edition }}
    env:
      MB_EDITION: ${{ matrix.edition }}
      DISPLAY: ""
      QA_DB_ENABLED: true
      MB_PREMIUM_EMBEDDING_TOKEN: ${{ secrets.ENTERPRISE_TOKEN }}
      MB_SNOWPLOW_AVAILABLE: true
      MB_SNOWPLOW_URL: "http://localhost:9090" # Snowplow micro
      ELECTRON_EXTRA_LAUNCH_ARGS: "--remote-debugging-port=40500" # deploysentinel
      TZ: US/Pacific # to make node match the instance tz
    strategy:
      fail-fast: false
      matrix:
        java-version: [11]
        edition: [ee]
        folder:
          # - "admin"
          # - "binning"
          - "collections"
          # - "custom-column"
          # - "dashboard"
          # - "dashboard-filters"
          # - "downloads"
          - "embedding"
          # - "filters"
          # - "joins"
          # - "models"
          - "native"
          # - "native-filters"
          # - "onboarding"
          # - "organization"
          # - "permissions"
          # - "question"
          # - "sharing"
          # - "visualizations"
    services:
      maildev:
        image: maildev/maildev:2.0.5
        ports:
          - "1080:1080"
          - "1025:1025"
        credentials:
          username: jasonlaster11
          password: dckr_pat_kCPs_U_Z7Z6zOn9CguLFcckDH4Q
      openldap:
        image: osixia/openldap:1.5.0
        ports:
          - "389:389"
        credentials:
          username: jasonlaster11
          password: dckr_pat_kCPs_U_Z7Z6zOn9CguLFcckDH4Q
      postgres-sample:
        image: metabase/qa-databases:postgres-sample-12
        ports:
          - "5404:5432"
        credentials:
          username: jasonlaster11
          password: dckr_pat_kCPs_U_Z7Z6zOn9CguLFcckDH4Q
      mongo-sample:
        image: metabase/qa-databases:mongo-sample-4.4
        ports:
          - 27004:27017
        credentials:
          username: jasonlaster11
          password: dckr_pat_kCPs_U_Z7Z6zOn9CguLFcckDH4Q
      mysql-sample:
        image: metabase/qa-databases:mysql-sample-8
        ports:
          - 3304:3306
        credentials:
          username: jasonlaster11
          password: dckr_pat_kCPs_U_Z7Z6zOn9CguLFcckDH4Q

    steps:
      - uses: actions/checkout@v3
      - name: Record runs using Deploysentinel except for the release branch
        if: ${{ github.ref == 'refs/heads/master' || !(startsWith(github.event.pull_request.base.ref, 'release')) }}
        run: |
          echo "CYPRESS_DEPLOYSENTINEL_KEY=${{ secrets.CYPRESS_DEPLOYSENTINEL_KEY }}" >> $GITHUB_ENV
      - name: Prepare front-end environment
        uses: ./.github/actions/prepare-frontend
      - name: Prepare JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java-version }}
          distribution: "temurin"
      - name: Prepare Cypress environment
        uses: ./.github/actions/prepare-cypress
      - name: Run Snowplow micro
        uses: ./.github/actions/run-snowplow-micro

      - uses: actions/download-artifact@v3
        name: Retrieve uberjar artifact for ${{ matrix.edition }}
        with:
          name: metabase-${{ matrix.edition }}-uberjar
      - name: Get the version info
        run: |
          jar xf target/uberjar/metabase.jar version.properties
          mv version.properties resources/

      # REPLAY.IO specific jobs
      - name: Install Replay.io browser
        run: npx @replayio/cypress install

      - name: 1) Run tests on ${{ matrix.folder }}
        if: matrix.edition == 'ee'
        run: |
          yarn run test-cypress-run \
          --env grepTags="-@OSS" \
          --folder ${{ matrix.folder }}
        env:
          TERM: xterm

      - run: ls

      - name: Parse setup 1 duration
        id: set_var_1
        if: always()
        run: |
          pwd
          content=`cat duration.json`
          echo "::set-output name=duration::$content"

      - name: 2) Run tests on ${{ matrix.folder }} with Video
        if: matrix.edition == 'ee'
        run: |
          yarn run test-cypress-run \
          --env grepTags="-@OSS" \
          --folder ${{ matrix.folder }}
        env:
          TERM: xterm
          CYPRESS_VIDEO_ENABLED: 1

      - name: Parse setup 2 duration
        id: set_var_2
        if: always()
        run: |
          content=`cat duration.json`
          echo "::set-output name=duration::$content"
          pwd

      - name: 3.1) Run tests on ${{ matrix.folder }} using Replay.io browser (no asserts/sourcemap collection)
        if: matrix.edition == 'ee'
        run: |
          yarn run test-cypress-run \
          --env grepTags="-@OSS" \
          --folder ${{ matrix.folder }} \
          --browser "replay-chromium"
        env:
          TERM: xterm
          CYPRESS_REPLAYIO_ENABLED: 1
          RECORD_REPLAY_DISABLE_ASSERTS: 1
          RECORD_REPLAY_DISABLE_SOURCEMAP_COLLECTION: 1
          RECORD_REPLAY_METADATA_FILE: /tmp/replay-metadata.json
          RECORD_REPLAY_METADATA_TEST_RUN_ID: ${{ needs.test-run-id.outputs.testRunId }}

      - name: Parse setup 3.1 duration
        id: set_var_3_1
        if: always()
        run: |
          content=`cat duration.json`
          echo "::set-output name=duration::$content"
          pwd

      - name: 3.2) Run tests on ${{ matrix.folder }} using Replay.io browser (no asserts)
        if: matrix.edition == 'ee'
        run: |
          yarn run test-cypress-run \
          --env grepTags="-@OSS" \
          --folder ${{ matrix.folder }} \
          --browser "replay-chromium"
        env:
          TERM: xterm
          CYPRESS_REPLAYIO_ENABLED: 1
          RECORD_REPLAY_DISABLE_ASSERTS: 1
          RECORD_REPLAY_METADATA_FILE: /tmp/replay-metadata.json
          RECORD_REPLAY_METADATA_TEST_RUN_ID: ${{ needs.test-run-id.outputs.testRunId }}

      - name: Parse setup 3.2 duration
        id: set_var_3_2
        if: always()
        run: |
          content=`cat duration.json`
          echo "::set-output name=duration::$content"
          pwd

      - name: Record runs using Deploysentinel except for the release branch
        if: ${{ github.ref == 'refs/heads/master' || !(startsWith(github.event.pull_request.base.ref, 'release')) }}
        run: |
          echo "CYPRESS_DEPLOYSENTINEL_KEY=c554175b-4bda-4378-8bb3-b1fe62ccb868" >> $GITHUB_ENV

      - name: 4) Run tests on ${{ matrix.folder }} with DeploySentinel
        if: matrix.edition == 'ee'
        run: |
          yarn run test-cypress-run \
          --env grepTags="-@OSS" \
          --folder ${{ matrix.folder }}
        env:
          TERM: xterm
          DEPLOYSENTINEL_ENABLED: 1
          CYPRESS_DEPLOYSENTINEL_ENABLED: 1

      - name: Parse setup 4 duration
        id: set_var_4
        if: always()
        run: |
          content=`cat duration.json`
          echo "::set-output name=duration::$content"
          pwd

      - name: Set duration in output
        id: end
        if: always()
        run: |
          echo "baselineDuration=${{fromJson(steps.set_var_1.outputs.duration)}}" >> $GITHUB_OUTPUT
          echo "videoDuration=${{fromJson(steps.set_var_2.outputs.duration)}}" >> $GITHUB_OUTPUT
          echo "replayV1Duration=${{fromJson(steps.set_var_3_1.outputs.duration)}}" >> $GITHUB_OUTPUT
          echo "replayV2Duration=${{fromJson(steps.set_var_3_2.outputs.duration)}}" >> $GITHUB_OUTPUT
          echo "deploySentinelDuration=${{fromJson(steps.set_var_4.outputs.duration)}}" >> $GITHUB_OUTPUT
  upload-benchmarks:
    name: Upload benchmarks
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: always()
    steps:
      - run: |
          echo "baselineDuration=${{fromJson(needs.e2e-tests.outputs.baselineDuration)}}"
          echo "videoDuration=${{fromJson(needs.e2e-tests.outputs.videoDuration)}}"
          echo "replayV1Duration=${{fromJson(needs.e2e-tests.outputs.replayV1Duration)}}"
          echo "replayV2Duration=${{fromJson(needs.e2e-tests.outputs.replayV2Duration)}}"
          echo "deploySentinelDuration=${{fromJson(needs.e2e-tests.outputs.deploySentinelDuration)}}"
      - name: Fetch API Data 📦
        uses: JamesIves/fetch-api-data-action@v2
        # Don't upload metrics for pull requests, so our stats are clean
        if: ${{ github.ref_name == 'main' }}
        with:
          endpoint: "https://telemetry.replay.io"
          configuration: '{ "method": "POST", "body": {"event": "Webhook", "source": "metrics", "name": "action-finished-3-beta", "project": "metabase", "baselineDuration": "${{ needs.e2e-tests.outputs.baselineDuration }}", "videoDuration": "${{ needs.e2e-tests.outputs.videoDuration }}", "replayV1Duration": "${{ needs.e2e-tests.outputs.replayV1Duration }}", "replayV2Duration": "${{ needs.e2e-tests.outputs.replayV2Duration }}", "deploySentinelDuration": "${{ needs.e2e-tests.outputs.deploySentinelDuration }}" } }'
